// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

import {Test, console} from "forge-std/Test.sol";
import {YieldManager} from "../src/YieldManager.sol";

contract CrosschainDeposit is Test {

    YieldManager public yieldManager;
    address      public user = 0x31d2Af4c13737C89353710C4c2267E7217Bd6Aa8;
    address      public operator;

    function setUp() public {
        uint256 forkId = vm.createFork("https://base-rpc.publicnode.com");
        vm.selectFork(forkId);

        operator = vm.addr(1);

        vm.deal(operator, 100 ether);
        vm.deal(user, 100 ether);

        yieldManager = new YieldManager(
            0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d, // Token Messenger 
            0x81D40F21F12A8F0E3252Bccb954D722d4c464B64, // Message Transmitter
            0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, // USDC address
            false // isWorld
        );
    }

    function test_deploy() public view {
        console.log("YieldManager deployed at: %s", address(yieldManager));
    }

    function process_deposit_aave() public {
        bytes memory attestion = hex"dc6e3d1545d32665130941887581b0922714e1ad2577af5e73d4d4592ffa32ed4154969ab04977e662beac1117c7506b7bbf056496c061425f1802c0d7caaf9a1cb985c70ef408d94e2d817c604a4ab3451c1bbac6eb66d3deb0f83161050222616547708edc312aff14ccfb966d0983fb00c22041813e7e52ae31895dfb49f0291b";
        bytes memory message = hex"000000010000000600000003a04375dd28c0b5a2a78d78a2be06a0d3679eda56741d6b4518a517aa0d8386db00000000000000000000000028b5a0e9c621a5badaa536219b3a228c8168cf5d00000000000000000000000028b5a0e9c621a5badaa536219b3a228c8168cf5d0000000000000000000000000000000000000000000000000000000000000000000003e8000003e800000001000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f00000000000000000000000000000000000000000000000000000000000186a000000000000000000000000031d2af4c13737c89353710c4c2267e7217bd6aa8000000000000000000000000000000000000000000000000000000000001869f000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000015cda8e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000031d2af4c13737c89353710c4c2267e7217bd6aa800000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000794a61358d6845594f94dc1db02a252b5b4814ad";

        yieldManager.processDeposit(
            message,
            attestion
        );
    }

    function init_withdraw_aave() public {
        // test_process_deposit_aave();

        yieldManager.initWithdraw(
            address(user)
        );
    }

    function test_process_deposit_morpho() public {
        bytes memory attestion = hex"56342990812a5ca1b90f5f0870c7dc4c5b679cc72ee4d396467bd5da1b047f740c1d0c00804ed60b4317a1d7234b3b0494bce8570f4e4fada8dc5c3e9ddc4c0d1b1b4a3caab00a59c49f1d3e580b76b62e9d4c5fa4b5a462082c99bdb5f7e0109c7614eefcc195dd691e6f18e736111bf85d00fd32eecb8051fa73cce6bb0865fd1b";
        bytes memory message = hex"000000010000000e000000065a78cef743e27080796aba955ef5793eea8d514476eecaed08d56075fb80601600000000000000000000000028b5a0e9c621a5badaa536219b3a228c8168cf5d00000000000000000000000028b5a0e9c621a5badaa536219b3a228c8168cf5d0000000000000000000000000000000000000000000000000000000000000000000003e8000003e80000000100000000000000000000000079a02482a880bce3f13e09da970dc34db4cd24d10000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f00000000000000000000000000000000000000000000000000000000000186a000000000000000000000000031d2af4c13737c89353710c4c2267e7217bd6aa8000000000000000000000000000000000000000000000000000000000001869f000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000001f03f29000000000000000000000000000000000000000000000000000000000000000200000000000000000000000031d2af4c13737c89353710c4c2267e7217bd6aa800000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000beef010f9cb27031ad51e3333f9af9c6b1228183";

        yieldManager.processDeposit(
            message,
            attestion
        );
    }

    function test_init_withdraw_morpho() public {
        test_process_deposit_morpho();

        yieldManager.initWithdraw(
            address(user)
        );
    }
}
